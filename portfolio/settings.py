"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from django.utils.translation import gettext_lazy as _
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Path to the environment file
env_path = os.path.join(BASE_DIR, '..', 'environment')

# Read the environment file
with open(env_path) as f:
    DJANGO_ENV = f.read().strip()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (DJANGO_ENV == 'dev')

ALLOWED_HOSTS = ['127.0.0.1', 'sunrisedrones.pythonanywhere.com', 'balancedrock.pythonanywhere.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolioApp.apps.PortfolioappConfig',
    'rosetta',
]
# pip install django-rosetta

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if DJANGO_ENV == 'dev':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'SunriseDrones$dev',
            'USER': 'SunriseDrones',
            'PASSWORD': 'weakPassword', 
            'HOST': 'SunriseDrones.mysql.pythonanywhere-services.com',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'SunriseDrones$default',
            'USER': 'SunriseDrones',
            'PASSWORD': 'weakerPassword', 
            'HOST': 'SunriseDrones.mysql.pythonanywhere-services.com',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# https://testdriven.io/blog/multiple-languages-in-django/
# https://docs.djangoproject.com/en/dev/topics/i18n/translation/

LANGUAGE_CODE = 'en'
LANGUAGES = (
    ('en', _('English')),
    ('pt', _('Portuguese')),
)
# add to settings: from django.utils.translation import gettext_lazy as _
LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]
# make locale folder in root.
# when add new text * django-admin makemessages --all --ignore=env 
# django-admin compilemessages --ignore=env
ROSETTA_SHOW_AT_ADMIN_PANEL = True

TIME_ZONE = 'UTC'
# 'UTC' is the default TIME_ZONE.
USE_I18N = True
USE_L10N = True
# Since USE_L10N is set to True, Django will display numbers and dates using the format of the current locale.
USE_TZ = True
# Finally, when USE_TZ is True, datetimes will be timezone-aware.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
# STATICFILE_DIRS = [os.path.join(BASE_DIR, "static"),]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
ROSETTA_WSGI_AUTO_RELOAD = True
ROSETTA_UWSGI_AUTO_RELOAD = True
